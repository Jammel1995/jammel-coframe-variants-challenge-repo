/*! Code generated by Coframe AI Editor */
(() => {
  // Module initializer
  const initModule = (fn, val) => () => (fn && (val = fn((fn = 0))), val);

  // Module exporter
  const exportModule = (fn, mod) => () => (
    mod || fn((mod = { exports: {} }).exports, mod), mod.exports
  );

  // Main DOM creation
  function createElement(tag, props, ...children) {
    if (!tag) {
      const stackTrace = getStackTrace();
      const hasProps = props && Object.keys(props).length > 0;
      const hasChildren = children && children.length > 0;
      let openTag = "";
      if (hasProps) {
        openTag = `<${tag}\n  ${Object.entries(props)
          .map(([key, value]) => `${key}=${JSON.stringify(value)}`)
          .join("\n  ")}${hasChildren ? ">" : ""}`;
      } else {
        openTag = `<${tag}${hasChildren ? ">" : ""}`;
      }
      const closeTag = hasChildren
        ? `\n  {/* children.length: ${children.length} */}\n</${tag}>`
        : hasProps
        ? "\n/>"
        : "/>";
      throw new Error(
        `Invalid element type: \`${tag}\`.\n\n\n${openTag}${closeTag}\n${
          stackTrace ? `within ${JSON.stringify(stackTrace)}.` : ""
        }`
      );
    }

    if (tag === FRAGMENT) {
      const fragment = document.createDocumentFragment();
      appendChildren(fragment, children);
      return fragment;
    }

    if (typeof tag === "function") {
      return tag({ ...(props || {}), children: normalizeChildren(children) });
    }

    const element =
      typeof tag === "string"
        ? document.createElement(tag)
        : document.createElement(String(tag));
    if (props) setAttributes(element, props);
    appendChildren(element, children);
    return element;
  }

  // Stack trace utility
  function getStackTrace() {
    return new Error().stack
      ?.split("\n")?.[3]
      ?.trim()
      .replace(/^at\s+/, "");
  }

  // Attribute setter
  function setAttributes(elem, attributes) {
    for (const attr in attributes) {
      if (attr === "key") continue;
      const value = attributes[attr];

      if (attr === "ref") {
        if (typeof value === "function") {
          value(elem);
        } else if (value && typeof value === "object") {
          value.current = elem;
        }
        continue;
      }

      if (attr === "class" || attr === "className") {
        setClass(elem, value);
        continue;
      }

      if (attr === "style") {
        setStyle(elem, value);
        continue;
      }

      if (attr === "dataset" && value && typeof value === "object") {
        for (const key in value) {
          elem.dataset[key] = String(value[key]);
        }
        continue;
      }

      if (
        attr === "dangerouslySetInnerHTML" &&
        value &&
        typeof value === "object"
      ) {
        elem.innerHTML = value.__html ?? "";
        continue;
      }

      if (attr.startsWith("on") && typeof value === "function") {
        const event = attr.slice(2).toLowerCase();
        elem.addEventListener(event, value);
        continue;
      }

      const attrName = attr === "for" ? "htmlFor" : attr;
      try {
        if (attrName in elem && typeof elem[attrName] !== "function") {
          elem[attrName] = value;
        } else if (value !== false && value != null) {
          elem.setAttribute(attr, String(value));
        }
      } catch {
        if (value !== false && value != null) {
          elem.setAttribute(attr, String(value));
        }
      }
    }
  }

  // Class setter
  function setClass(elem, classValue) {
    if (!classValue) return;
    if (typeof classValue === "string") {
      elem.className = classValue;
    } else if (Array.isArray(classValue)) {
      elem.className = classValue.filter(Boolean).join(" ");
    } else if (typeof classValue === "object") {
      elem.className = Object.keys(classValue)
        .filter((key) => classValue[key])
        .join(" ");
    }
  }

  // Style setter
  function setStyle(elem, styleValue) {
    if (!styleValue) return;
    if (typeof styleValue === "string") {
      elem.style.cssText = styleValue;
      return;
    }
    const styleObj = elem.style;
    for (const prop in styleValue) {
      const value = styleValue[prop];
      if (value == null || value === false) continue;
      prop in styleObj
        ? (styleObj[prop] = String(value))
        : elem.style.setProperty(prop, String(value));
    }
  }

  // Append children to element
  function appendChildren(parent, childNodes) {
    const append = (node) => {
      if (node == null || node === false) return;
      if (Array.isArray(node)) {
        node.forEach(append);
      } else if (node instanceof Node) {
        parent.appendChild(node);
      } else {
        parent.appendChild(document.createTextNode(String(node)));
      }
    };
    childNodes.forEach(append);
  }

  // Normalize children array
  function normalizeChildren(childArray) {
    return childArray.length <= 1 ? childArray[0] : childArray;
  }

  // Fragment symbol
  let FRAGMENT;
  const initFragment = initModule(() => {
    "use strict";
    FRAGMENT = Symbol.for("JSX.Fragment");
  });

  // Main module
  const mainModule = exportModule(() => {
    initFragment();
    const config = {
      name: "CF Benefits List - Memory Air: Add Key Benefits Checklist",
    };
    const isActive = checkVariant(config);
    if (!isActive) return false;

    observeDOM(shouldRun, runVariant);

    // Run the variant logic
    function runVariant() {
      document
        .querySelector("body")
        ?.setAttribute("cf-test-active", config.name);
      const isMobileView = window.innerWidth < 768;
      const targetElement = isMobileView
        ? document.querySelector("#lp-pom-text-118")
        : document.querySelector("#lp-pom-text-422");

      if (targetElement) {
        if (!isMobileView) {
          const text421 = document.querySelector("#lp-pom-text-421");
          if (text421) {
            const topVal = parseInt(
              text421.style.top || getComputedStyle(text421).top
            );
            text421.style.top = `${topVal - 45}px`;
          }

          const text422 = document.querySelector("#lp-pom-text-422");
          if (text422) {
            const topVal = parseInt(
              text422.style.top || getComputedStyle(text422).top
            );
            text422.style.top = `${topVal - 45}px`;
          }

          const button423 = document.querySelector("#lp-pom-button-423");
          if (button423) {
            button423.style.top = "625px";
          }

          const box417 = document.querySelector("#lp-pom-box-417");
          if (box417) {
            const topVal = parseInt(
              box417.style.top || getComputedStyle(box417).top
            );
            box417.style.top = `${topVal + 25}px`;
          }
        }

        if (isMobileView) {
          const box116 = document.querySelector("#lp-pom-box-116");
          if (box116) {
            box116.style.height = "400px";
          }

          const button115 = document.querySelector("#lp-pom-button-115");
          if (button115) {
            button115.style.top = "355px";
          }

          [
            "#lp-pom-image-120",
            "#lp-pom-block-194",
            "#lp-pom-text-195",
            "#lp-pom-text-197",
            "#lp-pom-image-137",
            "#lp-pom-block-18",
            "#lp-pom-block-32",
            "#lp-pom-block-36",
            "#lp-pom-block-150",
            "#lp-pom-block-198",
            "#lp-pom-block-200",
            "#lp-pom-block-63",
            "#lp-pom-block-67",
            "#lp-pom-block-73",
            "#lp-pom-block-81",
          ].forEach((selector) => {
            const elem = document.querySelector(selector);
            if (elem) {
              const topVal = parseInt(
                elem.style.top || getComputedStyle(elem).top
              );
              elem.style.top = `${topVal + 160}px`;
            }
          });

          const block194 = document.querySelector("#lp-pom-block-194");
          if (block194) {
            block194.style.height = "340px";
          }
        }

        let topPos = "490px";
        let leftPos = "15px";
        if (isMobileView) {
          leftPos = "25px";
          topPos = "260px";
        }

        const variantElement = createVariantElement({
          isMobile: isMobileView,
          mobileTop: topPos,
          mobileLeft: leftPos,
        });

        targetElement.insertAdjacentElement("afterend", variantElement);
        window.CFQ = window.CFQ || [];
        window.CFQ.push({ emit: "variantRendered" });
      } else {
        console.error(
          `Target element not found: ${
            isMobileView ? "#lp-pom-text-118" : "#lp-pom-text-422"
          }`
        );
      }
    }

    // Check if variant should run
    function shouldRun() {
      try {
        const isCFDefined = typeof window.CF !== "undefined";
        const selector = `body[cf-test-active="${config.name}"]`;
        const isNotActive = !document.querySelector(selector);
        const hasTarget =
          !!document.querySelector("#lp-pom-text-422") ||
          !!document.querySelector("#lp-pom-text-118");
        return isCFDefined && isNotActive && hasTarget;
      } catch (err) {
        console.error("Check error:", err);
        return false;
      }
    }

    // Create the variant UI
    function createVariantElement({ isMobile, mobileTop, mobileLeft }) {
      return createElement(
        "div",
        {
          className: "cf:absolute cf:block",
          style: {
            position: "absolute",
            left: isMobile ? "55px" : "670px",
            top: isMobile ? "265px" : "495px",
            width: isMobile ? "290px" : "360px",
            height: "auto",
            zIndex: isMobile ? 999 : 211,
            transform: isMobile ? "scale(0.9)" : "none",
            transformOrigin: isMobile ? "0px 0px" : "50% 50%",
            backgroundColor: "transparent",
            padding: isMobile ? "8px 8px 8px 31px" : "5px 5px 5px 36px",
            borderRadius: isMobile ? "8px" : "0px",
            margin: "0px",
            border: "none",
            boxSizing: "content-box",
            overflow: "visible",
            opacity: "1",
            visibility: "visible",
          },
        },
        createElement(
          "ul",
          { className: "cf:list-none cf:flex cf:flex-col cf:gap-2" },
          createElement(createListItem, {
            text: "226% Memory Boost",
            iconUrl:
              "https://duploservices-prod-mark-1-coframe-render-images-897729117657.s3.us-west-2.amazonaws.com/cro-agent-images/memoryair/4fffa25b-c16b-44cf-85e4-33184c8fdc00.webp?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Content-Sha256=UNSIGNED-PAYLOAD&X-Amz-Credential=AKIA5CBGTHXMTQMHTEJ4%2F20251015%2Fus-west-2%2Fs3%2Faws4_request&X-Amz-Date=20251015T090915Z&X-Amz-Expires=86400&X-Amz-Signature=8a7416a2d6be77462e588becf205b8086c1f69416ed7891970110c58a468c258&X-Amz-SignedHeaders=host&x-amz-checksum-mode=ENABLED&x-id=GetObject",
            isMobile,
          }),
          createElement(createListItem, {
            text: "Feel Years Younger",
            iconUrl:
              "https://duploservices-prod-mark-1-coframe-render-images-897729117657.s3.us-west-2.amazonaws.com/cro-agent-images/memoryair/2ce4f80c-a08c-40ea-9d4f-eed1d5a08fcc.webp?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Content-Sha256=UNSIGNED-PAYLOAD&X-Amz-Credential=AKIA5CBGTHXMTQMHTEJ4%2F20251015%2Fus-west-2%2Fs3%2Faws4_request&X-Amz-Date=20251015T090931Z&X-Amz-Expires=86400&X-Amz-Signature=08cb66ffa780606c55409b65044565201f81e2ab023a52a54df758847c8af6ff&X-Amz-SignedHeaders=host&x-amz-checksum-mode=ENABLED&x-id=GetObject",
            isMobile,
          }),
          createElement(createListItem, {
            text: "Works While Sleeping",
            iconUrl:
              "https://duploservices-prod-mark-1-coframe-render-images-897729117657.s3.us-west-2.amazonaws.com/cro-agent-images/memoryair/8ca63b29-27df-494b-96dc-d2ca26ebc9d6.webp?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Content-Sha256=UNSIGNED-PAYLOAD&X-Amz-Credential=AKIA5CBGTHXMTQMHTEJ4%2F20251015%2Fus-west-2%2Fs3%2Faws4_request&X-Amz-Date=20251015T090945Z&X-Amz-Expires=86400&X-Amz-Signature=39c01cf67dad2341f639a10dd52a9f973e3354e5dded6b94dade155ea5b1d4e2&X-Amz-SignedHeaders=host&x-amz-checksum-mode=ENABLED&x-id=GetObject",
            isMobile,
          })
        )
      );
    }

    // Create list item
    function createListItem({ text, iconUrl, isMobile }) {
      return createElement(
        "li",
        { className: "cf:flex cf:items-start cf:gap-[10px]" },
        createElement("img", {
          src: iconUrl,
          alt: "benefit icon",
          className: "cf:flex-shrink-0 cf:mt-[4px]",
          style: {
            width: "20px",
            height: "20px",
            borderRadius: "50%",
            objectFit: "cover",
          },
        }),
        createElement(
          "span",
          {
            className: "cf:text-black cf:leading-normal",
            style: { fontSize: "20px" },
          },
          text
        )
      );
    }

    // DOM observer
    function observeDOM(checkFn, runFn, persistent = false) {
      const checkAndRun = () => {
        if (checkFn()) {
          if (!persistent) observer.disconnect();
          runFn();
        }
      };
      const observer = new MutationObserver(checkAndRun);
      observer.observe(document.documentElement, {
        childList: true,
        subtree: true,
      });
      checkAndRun();
      if (!persistent) setTimeout(() => observer.disconnect(), 10000);
    }

    // Variant checker
    function checkVariant(cfg) {
      const existing = window.CF || { qaTesting: false, testsRunning: [] };
      const isNew = !existing.testsRunning.find(
        (test) => test.name === cfg.name
      );
      if (!isNew) return false;
      existing.testsRunning = [...existing.testsRunning, cfg];
      window.CF = { ...window.CF, ...existing };
      return { ...window.CF };
    }
  });

  mainModule();
})();
